#!/usr/bin/env python3

import logging
import argparse
import ipaddress
import os
import json
from collections import namedtuple
import fileinput

from indy_common.config_util import getConfig
from indy_common.config_helper import ConfigHelper, NodeConfigHelper
from indy_common.txn_util import getTxnOrderedFields


from ledger.genesis_txn.genesis_txn_file_util import create_genesis_txn_init_ledger

from stp_core.crypto.nacl_wrappers import Signer

from plenum.common.member.member import Member
from plenum.common.member.steward import Steward

from plenum.common.keygen_utils import initNodeKeysForBothStacks, init_bls_keys
from plenum.common.constants import STEWARD, TRUSTEE
from plenum.common.util import hexToFriendly, is_hostname_valid
from plenum.common.signer_did import DidSigner
from plenum.common.config_helper import PConfigHelper, PNodeConfigHelper
from stp_core.common.util import adict


portsStart = 9700
nodeParamsFileName = 'indy.env'


CLIENT_CONNECTIONS_LIMIT = 500


class NetworkSetup:
    @staticmethod
    def getNumberFromName(name: str) -> int:
        if name.startswith("Node"):
            return int(name[4:])
        elif name.startswith("Steward"):
            return int(name[7:])
        elif name.startswith("Client"):
            return int(name[6:])
        else:
            raise ValueError("Cannot get number from {}".format(name))

    @staticmethod
    def getNymFromVerkey(verkey: bytes):
        return hexToFriendly(verkey)

    @staticmethod
    def writeNodeParamsFile(filePath, name, nIp, nPort, cIp, cPort):
        contents = [
            'NODE_NAME={}'.format(name),
            'NODE_IP={}'.format(nIp),
            'NODE_PORT={}'.format(nPort),
            'NODE_CLIENT_IP={}'.format(cIp),
            'NODE_CLIENT_PORT={}'.format(cPort),
            'CLIENT_CONNECTIONS_LIMIT={}'.format(CLIENT_CONNECTIONS_LIMIT)
        ]
        with open(filePath, 'w') as f:
            f.writelines(os.linesep.join(contents))


    @classmethod
    def bootstrap_nodes_core(
            cls,
            config,
            network,
            appendToLedgers,
            domainTxnFieldOrder,
            trustee_def,
            steward_defs,
            node_defs,
            client_defs,
            localNodes,
            nodeParamsFileName,
            config_helper_class=PConfigHelper,
            node_config_helper_class=PNodeConfigHelper,
            chroot: str=None):

        if not localNodes:
            localNodes = {}
        try:
            if isinstance(localNodes, int):
                _localNodes = {localNodes}
            else:
                _localNodes = {int(_) for _ in localNodes}
        except BaseException as exc:
            raise RuntimeError('nodeNum must be an int or set of ints') from exc

        config.NETWORK_NAME = network

        config_helper = config_helper_class(config, chroot=chroot)
        os.makedirs(config_helper.genesis_dir, exist_ok=True)
        genesis_dir = config_helper.genesis_dir
        keys_dir = config_helper.keys_dir

        poolLedger = cls.init_pool_ledger(appendToLedgers, genesis_dir, config)
        domainLedger = cls.init_domain_ledger(appendToLedgers, genesis_dir,
                                              config, domainTxnFieldOrder)

        # TODO: make it parameter for generate genesis txns script
        genesis_protocol_version = None

        # 1. INIT DOMAIN LEDGER GENESIS FILE
        seq_no = 1
        trustee_txn = Member.nym_txn(trustee_def.nym, verkey=trustee_def.verkey, role=TRUSTEE,
                                     seq_no=seq_no,
                                     protocol_version=genesis_protocol_version)
        seq_no += 1
        domainLedger.add(trustee_txn)

        for sd in steward_defs:
            nym_txn = Member.nym_txn(sd.nym, verkey=sd.verkey, role=STEWARD, creator=trustee_def.nym,
                                     seq_no=seq_no,
                                     protocol_version=genesis_protocol_version)
            seq_no += 1
            domainLedger.add(nym_txn)

        for cd in client_defs:
            txn = Member.nym_txn(cd.nym, verkey=cd.verkey, creator=trustee_def.nym,
                                 seq_no=seq_no,
                                 protocol_version=genesis_protocol_version)
            seq_no += 1
            domainLedger.add(txn)

        # 2. INIT KEYS AND POOL LEDGER GENESIS FILE
        seq_no = 1
        for nd in node_defs:
            if nd.idx in _localNodes:
                _, verkey, blskey, key_proof = initNodeKeysForBothStacks(nd.name, keys_dir, nd.sigseed, override=True)
                verkey = verkey.encode()
                assert verkey == nd.verkey

                if nd.ip != '127.0.0.1':
                    paramsFilePath = os.path.join(config.GENERAL_CONFIG_DIR, nodeParamsFileName)
                    print('Nodes will not run locally, so writing {}'.format(paramsFilePath))
                    NetworkSetup.writeNodeParamsFile(paramsFilePath, nd.name,
                                                     "0.0.0.0", nd.port,
                                                     "0.0.0.0", nd.client_port)

                print("This node with name {} will use ports {} and {} for nodestack and clientstack respectively"
                      .format(nd.name, nd.port, nd.client_port))
            else:
                verkey = nd.verkey
                blskey, key_proof = init_bls_keys(keys_dir, nd.name, nd.sigseed)
            node_nym = cls.getNymFromVerkey(verkey)

            node_txn = Steward.node_txn(nd.steward_nym, nd.name, node_nym,
                                        nd.ip, nd.port, nd.client_port, blskey=blskey,
                                        bls_key_proof=key_proof,
                                        seq_no=seq_no,
                                        protocol_version=genesis_protocol_version)
            seq_no += 1
            poolLedger.add(node_txn)

        poolLedger.stop()
        domainLedger.stop()

    @classmethod
    def init_pool_ledger(cls, appendToLedgers, genesis_dir, config):
        pool_txn_file = cls.pool_ledger_file_name(config)
        pool_ledger = create_genesis_txn_init_ledger(genesis_dir, pool_txn_file)
        if not appendToLedgers:
            pool_ledger.reset()
        return pool_ledger

    @classmethod
    def init_domain_ledger(cls, appendToLedgers, genesis_dir, config, domainTxnFieldOrder):
        domain_txn_file = cls.domain_ledger_file_name(config)
        domain_ledger = create_genesis_txn_init_ledger(genesis_dir, domain_txn_file)
        if not appendToLedgers:
            domain_ledger.reset()
        return domain_ledger

    @classmethod
    def pool_ledger_file_name(cls, config):
        return config.poolTransactionsFile

    @classmethod
    def domain_ledger_file_name(cls, config):
        return config.domainTransactionsFile

    @classmethod
    def bootstrap_nodes(cls, config, starting_port, nodeParamsFileName, domainTxnFieldOrder,
                        config_helper_class=PConfigHelper, node_config_helper_class=PNodeConfigHelper,
                        chroot: str=None):
        parser = argparse.ArgumentParser(description="Generate pool transactions for initialization")
        parser.add_argument('--clients', required=True, type=int,
                            help='client count')
        parser.add_argument('--node_num', required=True, type=int,
                            help='node number')
        parser.add_argument('--topology',
                            help='Location of the topology JSON file',
                            type=str,
                            default="/etc/indy/topology.json",
                            required=False)
        parser.add_argument(
            '--appendToLedgers',
            help="Determine if ledger files needs to be erased "
                 "before writing new information or not.",
            action='store_true')

        args = parser.parse_args()

        with open(args.topology, 'r') as f:
            topology = json.load(f)

        node_num = [args.node_num]

        steward_defs, node_defs = cls.gen_defs(topology['genesis_seeds'], topology['steward_seeds'], topology['ips'],
                                               topology['nodes'], starting_port)
        trustee_def = cls.gen_trustee_def(topology['trustee_seed'], 1)

        if args.node_num > 0:
            # update network during node generation only
            # edit NETWORK_NAME in config
            for line in fileinput.input(['/etc/indy/indy_config.py'], inplace=True):
                if 'NETWORK_NAME' not in line:
                    print(line, end="")
                else:
                    print("NETWORK_NAME = '{}'\n".format(topology['network']), end="")
            # with open('/etc/indy/indy_config.py', 'a') as cfgfile:
            #     cfgfile.write()

        for n_num in node_num:
            cls.bootstrap_nodes_core(config, topology['network'], args.appendToLedgers, domainTxnFieldOrder, trustee_def,
                                     steward_defs, node_defs, [], n_num, nodeParamsFileName,
                                     config_helper_class, node_config_helper_class)

    @staticmethod
    def _bootstrapArgsTypeNodeCount(nodesStrArg):
        if not nodesStrArg.isdigit():
            raise argparse.ArgumentTypeError('should be a number')
        n = int(nodesStrArg)
        if n > 100:
            raise argparse.ArgumentTypeError(
                "Cannot run {} nodes for testing purposes as of now. "
                "This is not a problem with the protocol but some placeholder "
                "rules we put in place which will be replaced by our "
                "Governance model. Going to run only 100".format(n)
            )
        if n <= 0:
            raise argparse.ArgumentTypeError('should be > 0')
        return n

    @staticmethod
    def _bootstrap_args_type_ips_hosts(ips_hosts_str_arg):
        ips = []
        for arg in ips_hosts_str_arg.split(','):
            arg = arg.strip()
            try:
                ipaddress.ip_address(arg)
            except ValueError:
                if not is_hostname_valid(arg):
                    raise argparse.ArgumentTypeError(
                        "'{}' is not a valid IP or hostname".format(arg)
                    )
                else:
                    ips.append(arg)
            else:
                ips.append(arg)
        return ips

    @classmethod
    def gen_defs(cls, genesis_seeds, steward_seeds, ips, nodes, starting_port):
        """
        Generates some default steward and node definitions for tests
        :param genesis_seeds: array of ip addresses
        :param steward_seeds: array of ip addresses
        :param ips: array of ip addresses
        :param nodes: array of node names
        :param starting_port: ports are assigned incremental starting with this
        :return: duple of steward and node definitions
        """

        node_count = len(nodes)
        if not ips:
            ips = ['127.0.0.1'] * node_count
        else:
            if len(ips) != node_count:
                if len(ips) > node_count:
                    ips = ips[:node_count]
                else:
                    ips += ['127.0.0.1'] * (node_count - len(ips))

        steward_defs = []
        node_defs = []
        for i in range(1, node_count + 1):
            d = adict()
            d.name = "Steward" + str(i)
            d.sigseed = steward_seeds[i-1][0:32].encode()
            s_signer = DidSigner(seed=d.sigseed)
            d.nym = s_signer.identifier
            d.verkey = s_signer.verkey
            steward_defs.append(d)

            name = nodes[i-1]
            sigseed = genesis_seeds[i-1][0:32].encode()
            node_defs.append(NodeDef(
                name=name,
                ip=ips[i - 1],
                port=starting_port+1,
                client_port=starting_port+2,
                idx=i,
                sigseed=sigseed,
                verkey=Signer(sigseed).verhex,
                steward_nym=d.nym))
        return steward_defs, node_defs

    @classmethod
    def gen_client_def(cls, idx):
        d = adict()
        d.name = "Client" + str(idx)
        d.sigseed = cls.getSigningSeed(d.name)
        c_signer = DidSigner(seed=d.sigseed)
        d.nym = c_signer.identifier
        d.verkey = c_signer.verkey
        return d

    @classmethod
    def gen_client_defs(cls, clientCount):
        return [cls.gen_client_def(idx) for idx in range(1, clientCount + 1)]

    @classmethod
    def gen_trustee_def(cls, seed, idx):
        d = adict()
        d.name = 'Trustee' + str(idx)
        d.sigseed = seed[0:32].encode()
        t_signer = DidSigner(seed=d.sigseed)
        d.nym = t_signer.identifier
        d.verkey = t_signer.verkey
        return d


NodeDef = namedtuple('NodeDef', 'name, ip, port, client_port, '
                                'idx, sigseed, verkey, steward_nym')


if __name__ == "__main__":
    logger = logging.getLogger()
    logger.disabled = True
    NetworkSetup.bootstrap_nodes(getConfig(), portsStart, nodeParamsFileName,
                                 getTxnOrderedFields(), ConfigHelper, NodeConfigHelper)

